/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     Jacco van Elst

DESCRIPTION:




Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2011-10-25 TV   Created.

\******************************************************************************/


import defs;
import stimuli;
import shuffle;

import output;
import test_page;


Block task
{
    on_event:entry()
    {

        control.button_box.open();
    }


    Part instructions
    {
        on_event:entry()
        {
            pause_page.set_text(
                "                   <b>Instructions</b>\n"
                "\n"
                "Thank you for taking part in this study.\n"
                "\n" 
                "In this experiment, you will hear a few Chinese sentences.\n"
                "\n"
                "You may hear the same sentence in different emotions. Your task is to listen carefully to the recordings. After each sentence, you need to indicate the tone of the target word (i.e. the bit underscored) by pressing one of four options on the button box.\n"
                "\n"
                "Please use the headphone to listen to the recordings. You will listen to each trial only one time.\n" 
                "\n"
                "First we will do a short practice.\n"
                "\n"
                "<i>Hit any button on the button-box when ready to start.</i>\n"
                , true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = practice_items.size;

            test_page.setup(num_cycles, true, true);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = practice_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "End of the practice part.\n"
                "\n"
                "If you have any questions at this moment please ask the "
                "experimenter now.\n"
                "\n"
                "<i>Hit any button on the button-box when ready to "
                "proceed.</i>", 
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block test
    {
        TestItem        item;   // current item

        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items[selected_group].size;

            // Prepare test page: progress bar enabled, feedback and prompt 
            // disabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {

                item = test_items[selected_group][test.cycle];

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;

                output.trialnum             = test.cycle + 1;
                output.id                   = item.id;
                output.emotion              = item.emotion;

                output.stim_fname           = item.stim_fname;

                output.carrier_sent_cn      = item.carrier_sent_cn;
                output.carrier_sent_pinyin  = item.carrier_sent_pinyin;
                output.carrier_sent_en      = item.carrier_sent_en;
                
                output.target_word_pinyin   = item.target_word_pinyin;
                output.correct_tone         = item.correct_tone;
                output.tone_chosen          = test_page.response.tone_chosen; 
                output.answer_correct       = test_page.response.correct;

                output.rt                   = test_page.response.rt;
               
                output.value                = test_page.response.value;
                
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. 
    task.enter(caller);
}
