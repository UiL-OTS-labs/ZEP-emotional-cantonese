/******************************************************************************\
TODO
\******************************************************************************/

import std_sound_output_device;
import std_texts_en;
import stimuli;
import defs;

plugin zep_display;


Page test_page
{
    TestItem    item;           // trial control parameters
    


    init()
    {
        fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
    }

    // this might enable A NUMPAD RESPONSE
    on_event:key_press()
    {

        if (input_key == KEY_KP_7 || input_key == KEY_KP_Home)
            response.process_hit(1, event_time);
        else if (input_key == KEY_KP_9 || input_key == KEY_KP_Page_Up)
            response.process_hit(2, event_time);
        else if (input_key == KEY_KP_1 || input_key == KEY_KP_End)
            response.process_hit(3, event_time);
        else if (input_key == KEY_KP_3 || input_key == KEY_KP_Page_Down)
            response.process_hit(4, event_time);
        else
            handle_special_key(this, input_key, input_modifiers);
    }

    on_event:message()
    {
        // Process button-box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }

    VerticalLayout layout
    {
        init()
        {
            spacing = 10; //50;
            height = 0;  
        }

        CanvasGadget labelcanvas
        {

            init()
            {
                fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
                size = 800, 200;
                offset_x = width / 2;
                offset_y = height / 2;
            }


            TextShape label_cn
            {
                on_event:init()
                {
                    //text = string(item.carrier_sent_cn);
                    x = 0;
                    y = -labelcanvas.height/3;

                    font_family         = "Arial Narrow";
                    font_size           = 30;
                    font_weight         = FONT_WEIGHT_BOLD;
                    line_pattern_color  = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    ver_alignment       = ALIGN_CENTER;
                    hor_alignment       = ALIGN_CENTER;
                }
            }


            TextShape label_py
            {
                on_event:init()
                {
                    x = 0;//360;
                    y = 0;
                    font_family         = "Arial Narrow";
                    font_size           = 18;
                    font_weight         = FONT_WEIGHT_BOLD;
                    line_pattern_color  = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment       = ALIGN_CENTER;
                    ver_alignment       = ALIGN_CENTER;

                }
            }

            TextShape label_en
            {
                on_event:init()
                {
                    x = 0;//360;
                    y = labelcanvas.height/3;
                    font_family         = "Arial Narrow";
                    font_size           = 18;
                    font_weight         = FONT_WEIGHT_BOLD;
                    line_pattern_color  = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment       = ALIGN_CENTER;
                    ver_alignment       = ALIGN_CENTER;
                }
            }


            TextShape syllable
            {

                on_event:init()
                {
                    x                   = 0;
                    y                   = labelcanvas.height/3;
                    font_family         = "Arial Narrow";
                    font_size           = 36;
                    font_weight         = FONT_WEIGHT_BOLD;
                    line_pattern_color  = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment       = ALIGN_CENTER;
                    ver_alignment       = ALIGN_CENTER;
                }
            }



            time present_labels(string cn,
                                string py,
                                string en,
                                time start,
                                time stop )
            {
                label_cn.text      = cn;
                label_py.text      = py;
                label_en.text      = en;

                // put it
                label_cn.start(start);
                label_py.start(start);
                label_en.start(start);

                label_cn.stop(stop);
                label_py.stop(stop);
                label_en.stop(stop);

                return label_en.expected_start_time;
            }


            time present_syllable(string syl, time start)
            {
                syllable.text          = syl;
                syllable.start(start);
                return syllable.expected_start_time;
            } 


            void clear_syllable()
            {
                syllable.abort();
                syllable.text = "";
                syllable.is_visible = false;
            }           
        }

        //spacer?

        CanvasGadget canvas
        {
            init()
            {
                fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
                size = 320, 210;
                offset_x = width / 2;
                offset_y = height / 2;
            }


            CrossShape fixation
            {
                init()
                {
                    radius = 15;
                    line_width = 5;
                    line_pattern_color = color:crimson;
                }
            }

            PolygonShape soundprime
            {
                init()
                {
                    num_points = 6;
                    set_x(0, -20);
                    set_y(0, -20);
                    set_x(1, 20);
                    set_y(1, -20);
                    set_x(2, 20);
                    set_y(2, 0);
                    set_x(3, 40);
                    set_y(3, 20);
                    set_x(4, -40);
                    set_y(4, 20);
                    set_x(5, -20);
                    set_y(5, 0);
                    fill_pattern_color = color:black;
                }
            }


            ImageShape bboxim
            {
                init()
                {
                    image    = stimuli_dir() + "images/bbox_image.png";
                    width    = 300;
                    height   = 200;
                    x        = -width/2;
                    y        = -height/2;
                }
            }

            void clear_bbox()
            {
                bboxim.abort();
                bboxim.is_visible = false;
            }

        }


        VerticalLayout buttons
        {

            init()
            {
                spacing = 50;
                options = LAYOUT_EQUAL_HEIGHT;
            }

            HorizontalLayout topbuttons
            {
                init()
                {
                    spacing = 50;
                    options = LAYOUT_EQUAL_WIDTH;
                }


                ButtonGadget button1
                {
                    init()
                    {
                        text                = TOPL_BUTTON_TEXT, true;
                        font_family         = TEST_PAGE_BUTTON_FONT_FAMILY;
                        font_size           = 17;
                        fill_pattern_color  = TEST_PAGE_BUTTON_COLOR;
                        text_color          = TEST_PAGE_BUTTON_TEXT_COLOR;
                        size = 140, 80;
                        is_visible = false;
                    }


                    on_event:activate()
                    {
                        response.process_hit(0, event_time);
                    }
                }


                ButtonGadget button2
                {
                    init()
                    {
                        text                = TOPR_BUTTON_TEXT, true;
                        font_family         = TEST_PAGE_BUTTON_FONT_FAMILY;
                        font_size           = 17;
                        fill_pattern_color  = TEST_PAGE_BUTTON_COLOR;
                        text_color          = TEST_PAGE_BUTTON_TEXT_COLOR;
                        size                = 140, 80;
                        is_visible          = false;
                    }


                    on_event:activate()
                    {
                        response.process_hit(1, event_time);
                    }
                }
        
            }


            HorizontalLayout botbuttons
            {

                init()
                {
                    spacing = 50;
                    options = LAYOUT_EQUAL_WIDTH;
                }

                ButtonGadget button3
                {
                    init()
                    {
                        text                = BOTL_BUTTON_TEXT, true;
                        font_family         = TEST_PAGE_BUTTON_FONT_FAMILY;
                        font_size           = 17;
                        fill_pattern_color  = TEST_PAGE_BUTTON_COLOR;
                        text_color          = TEST_PAGE_BUTTON_TEXT_COLOR;
                        size                = 140, 80;
                        is_visible          = false;
                    }


                    on_event:activate()
                    {
                        response.process_hit(2, event_time);
                    }
                }

                ButtonGadget button4
                {
                    init()
                    {
                        text                = BOTR_BUTTON_TEXT, true;
                        font_family         = TEST_PAGE_BUTTON_FONT_FAMILY;
                        font_size           = 17; 
                        fill_pattern_color  = TEST_PAGE_BUTTON_COLOR;
                        text_color          = TEST_PAGE_BUTTON_TEXT_COLOR;
                        size                = 140, 80;
                        is_visible          = false;
                    }


                    on_event:activate()
                    {
                        response.process_hit(3, event_time);
                    }
                }    
            }
        }


        //fixation cross flow
        time start_fixation(time t)
        {
            // Start fixation cross.
            canvas.fixation.start(t, FIXATION_DURATION);

            // Return fixation offset time.
            return canvas.fixation.expected_finish_time;
        }

        //placeholder for buttons
        time show_buttons(time t)
        {
            buttons.topbuttons.button1.is_visible = true;
            buttons.topbuttons.button2.is_visible = true;
            buttons.botbuttons.button3.is_visible = true;
            buttons.botbuttons.button4.is_visible = true;  

            // put it
            buttons.topbuttons.button1.start(t);
            buttons.topbuttons.button2.start(t);
            buttons.botbuttons.button3.start(t);
            buttons.botbuttons.button4.start(t);
            //time back
            return buttons.botbuttons.button4.expected_finish_time;
        }

        void hide_buttons()
        {
            buttons.topbuttons.button1.is_visible = false;
            buttons.topbuttons.button2.is_visible = false;
            buttons.botbuttons.button3.is_visible = false;
            buttons.botbuttons.button4.is_visible = false;  
        }

        // present warning
        time prompt_audio(time t)
        {
            canvas.soundprime.start(t, PROMPT_SOUND_DURATION);
            return canvas.soundprime.expected_finish_time;
        }

        // present prompt
        time prompt_response(time t)
        {
            canvas.bboxim.start(t);
            return canvas.bboxim.expected_start_time;
        }
  

        void reset()
        {
            full_abort();
            canvas.clear_bbox();
            labelcanvas.clear_syllable();
        }
    }


    SoundChain stimulus
    {
        // Sound source/producer object.
        SoundFile clip {}

        // Sound sink/consumer object.
        SoundPlayback playback {}


        time play(time t)
        {
            abort();

            playback.device = sound_output_device;
            clip.file = stimuli_dir() + "sounds/" + item.stim_fname;

            start(t);

            return expected_finish_time;
        }
    }


    Response response
    {
        // Response data.
        int     value;          // response value: 0=no, 1=yes, -1=timeout
        int     rt;             // response time [ms]
        int     correct;        // correct response: 0=no, 1=yes, -1=n.a.
        int     tone_chosen;

        void clear()
        {
            value = -1;
            rt = -9999;
            correct = -1;
        }


        void process_hit(int val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the 
            // response interval.
            if (validity == HIT_VALID)
            {
                value = val;
                rt = int(reaction_time(0));

                correct = (val + 1 == item.correct_tone);
                
                if (val == 0)
                    tone_chosen = 1;
                else if (val == 1)
                    tone_chosen = 2;
                else if (val == 2)
                    tone_chosen = 3;
                else if (val == 3)
                    tone_chosen = 4;
                else
                    print_error(" ERRRROR! Nothing chosen.");

                // println ("Chosen button value = " + tone_chosen);
                // println ("Chosen button index = " + val );
                // println ("Correct item_button = " + item.correct_tone);
                // println ("was is correct? ..." + correct);

                ignore_remaining_hits();

                stop();
            }
            // else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            // {
            //     // False alarm. Deal with this if desired.
            //     //TODO: ask Yachan!
            // }
        }


        on_event:finish()
        {
            real correctness = 0;
            if (num_valid_hits > 0) correctness = correct ? 1 : -1;

            if (!test_page_overlay.start_feedback(this, correctness, 
                    FEEDBACK_DURATION)) 
                done(CONTINUE);
        }


        on_event:message()
        {
            done(CONTINUE);
        }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();
        stimulus.abort();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();

    }

    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false)
    {
        test_page_overlay.setup(this);

        // Show or hide prompt.
        
        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable button-box buttons 0 and 1 for resp. no(0) and yes(1).
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(0, 0); //but 0 (top left), index 0
        control.button_box.enable_button(1, 2); //but 1 (bottom left), index 2
        control.button_box.enable_button(3, 1); //but 3 (top right), index 1
        control.button_box.enable_button(2, 3); //but 2 (bottom right), index 3
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();

        control.button_box.disable_buttons();
        control.target = null;
    }
   

    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;

        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);

        // Reset response data.
        response.clear();

        // Start fixation symbol, for whatevcer the reason.
        time fixoffset = layout.start_fixation(tref);

        time wait_a_bit = fixoffset + LABEL_WAIT_TIME;  

        time audio_prompt_offset = layout.prompt_audio(wait_a_bit);

        time audio_end = stimulus.play(audio_prompt_offset);

        time buttons_visible = layout.show_buttons(audio_end);

        //time labels_gone = layout.labelcanvas.hide_labels(audio_end);
        time whatever = layout.prompt_response(audio_end); 


        time labelonset = layout.labelcanvas.present_labels(
                                            item.carrier_sent_cn, 
                                            item.carrier_sent_pinyin,
                                            item.carrier_sent_en, 
                                            fixoffset,
                                            audio_end);

        time sylonset  = layout.labelcanvas.present_syllable(
                                                    item.target_syllable,
                                                    audio_end);

        // Response interval starts at stimulus onset. Timeout after 
        // RESPONSE_DURATION unless this duration is 0s or less.
        response.start(audio_end, RESPONSE_DURATION);

        layout.hide_buttons();

        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);

        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " + 
            string(item.emotion) + "  " + 
            string(item.stim_fname) + " " + 
            string(item.carrier_sent_en));

        // Remember who to signal when the trial is over.
        target = caller;
    }
}
